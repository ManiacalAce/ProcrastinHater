//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ProcrastinHater.POCOEntities
{
    public partial class DayOfYearSpecifier
    {
        #region Primitive Properties
    
        public virtual int YearlyScheduleID
        {
            get { return _yearlyScheduleID; }
            set
            {
                if (_yearlyScheduleID != value)
                {
                    if (YearlySchedule != null && YearlySchedule.ScheduleID != value)
                    {
                        YearlySchedule = null;
                    }
                    _yearlyScheduleID = value;
                }
            }
        }
        private int _yearlyScheduleID;
    
        public virtual int DayOfYear
        {
            get;
            set;
        }
    
        public virtual long TimeOfDayToStartTicks
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual YearlySchedule YearlySchedule
        {
            get { return _yearlySchedule; }
            set
            {
                if (!ReferenceEquals(_yearlySchedule, value))
                {
                    var previousValue = _yearlySchedule;
                    _yearlySchedule = value;
                    FixupYearlySchedule(previousValue);
                }
            }
        }
        private YearlySchedule _yearlySchedule;

        #endregion
        #region Association Fixup
    
        private void FixupYearlySchedule(YearlySchedule previousValue)
        {
            if (previousValue != null && previousValue.DayOfYearSpecifiers.Contains(this))
            {
                previousValue.DayOfYearSpecifiers.Remove(this);
            }
    
            if (YearlySchedule != null)
            {
                if (!YearlySchedule.DayOfYearSpecifiers.Contains(this))
                {
                    YearlySchedule.DayOfYearSpecifiers.Add(this);
                }
                if (YearlyScheduleID != YearlySchedule.ScheduleID)
                {
                    YearlyScheduleID = YearlySchedule.ScheduleID;
                }
            }
        }

        #endregion
    }
}
