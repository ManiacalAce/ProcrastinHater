//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ProcrastinHater.POCOEntities
{
    public abstract partial class SchedulingInformation
    {
        #region Primitive Properties
    
        public virtual int ScheduleID
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> NextRun
        {
            get;
            set;
        }
    
        public virtual int TimeoutActionID
        {
            get { return _timeoutActionID; }
            set
            {
                if (_timeoutActionID != value)
                {
                    if (TimeoutAction != null && TimeoutAction.TimeoutActionID != value)
                    {
                        TimeoutAction = null;
                    }
                    _timeoutActionID = value;
                }
            }
        }
        private int _timeoutActionID;
    
        public virtual bool IsEnabled
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual Nullable<long> DurationTicks
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<CustomScheduleSpecifier> CustomScheduleSpecifiers
        {
            get
            {
                if (_customScheduleSpecifiers == null)
                {
                    var newCollection = new FixupCollection<CustomScheduleSpecifier>();
                    newCollection.CollectionChanged += FixupCustomScheduleSpecifiers;
                    _customScheduleSpecifiers = newCollection;
                }
                return _customScheduleSpecifiers;
            }
            set
            {
                if (!ReferenceEquals(_customScheduleSpecifiers, value))
                {
                    var previousValue = _customScheduleSpecifiers as FixupCollection<CustomScheduleSpecifier>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomScheduleSpecifiers;
                    }
                    _customScheduleSpecifiers = value;
                    var newValue = value as FixupCollection<CustomScheduleSpecifier>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomScheduleSpecifiers;
                    }
                }
            }
        }
        private ICollection<CustomScheduleSpecifier> _customScheduleSpecifiers;
    
        public virtual ICollection<DayofMonthSpecifier> DayofMonthSpecifiers
        {
            get
            {
                if (_dayofMonthSpecifiers == null)
                {
                    var newCollection = new FixupCollection<DayofMonthSpecifier>();
                    newCollection.CollectionChanged += FixupDayofMonthSpecifiers;
                    _dayofMonthSpecifiers = newCollection;
                }
                return _dayofMonthSpecifiers;
            }
            set
            {
                if (!ReferenceEquals(_dayofMonthSpecifiers, value))
                {
                    var previousValue = _dayofMonthSpecifiers as FixupCollection<DayofMonthSpecifier>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDayofMonthSpecifiers;
                    }
                    _dayofMonthSpecifiers = value;
                    var newValue = value as FixupCollection<DayofMonthSpecifier>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDayofMonthSpecifiers;
                    }
                }
            }
        }
        private ICollection<DayofMonthSpecifier> _dayofMonthSpecifiers;
    
        public virtual ICollection<DayOfYearSpecifier> DayOfYearSpecifiers
        {
            get
            {
                if (_dayOfYearSpecifiers == null)
                {
                    var newCollection = new FixupCollection<DayOfYearSpecifier>();
                    newCollection.CollectionChanged += FixupDayOfYearSpecifiers;
                    _dayOfYearSpecifiers = newCollection;
                }
                return _dayOfYearSpecifiers;
            }
            set
            {
                if (!ReferenceEquals(_dayOfYearSpecifiers, value))
                {
                    var previousValue = _dayOfYearSpecifiers as FixupCollection<DayOfYearSpecifier>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDayOfYearSpecifiers;
                    }
                    _dayOfYearSpecifiers = value;
                    var newValue = value as FixupCollection<DayOfYearSpecifier>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDayOfYearSpecifiers;
                    }
                }
            }
        }
        private ICollection<DayOfYearSpecifier> _dayOfYearSpecifiers;
    
        public virtual ICollection<MonthlyRelativeSpecifier> MonthlyRelativeSpecifiers
        {
            get
            {
                if (_monthlyRelativeSpecifiers == null)
                {
                    var newCollection = new FixupCollection<MonthlyRelativeSpecifier>();
                    newCollection.CollectionChanged += FixupMonthlyRelativeSpecifiers;
                    _monthlyRelativeSpecifiers = newCollection;
                }
                return _monthlyRelativeSpecifiers;
            }
            set
            {
                if (!ReferenceEquals(_monthlyRelativeSpecifiers, value))
                {
                    var previousValue = _monthlyRelativeSpecifiers as FixupCollection<MonthlyRelativeSpecifier>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMonthlyRelativeSpecifiers;
                    }
                    _monthlyRelativeSpecifiers = value;
                    var newValue = value as FixupCollection<MonthlyRelativeSpecifier>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMonthlyRelativeSpecifiers;
                    }
                }
            }
        }
        private ICollection<MonthlyRelativeSpecifier> _monthlyRelativeSpecifiers;
    
        public virtual TimeoutAction TimeoutAction
        {
            get { return _timeoutAction; }
            set
            {
                if (!ReferenceEquals(_timeoutAction, value))
                {
                    var previousValue = _timeoutAction;
                    _timeoutAction = value;
                    FixupTimeoutAction(previousValue);
                }
            }
        }
        private TimeoutAction _timeoutAction;
    
        public virtual ICollection<Task> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    var newCollection = new FixupCollection<Task>();
                    newCollection.CollectionChanged += FixupTasks;
                    _tasks = newCollection;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    var previousValue = _tasks as FixupCollection<Task>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    var newValue = value as FixupCollection<Task>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTasks;
                    }
                }
            }
        }
        private ICollection<Task> _tasks;

        #endregion
        #region Association Fixup
    
        private void FixupTimeoutAction(TimeoutAction previousValue)
        {
            if (previousValue != null && previousValue.SchedulingInformationSet.Contains(this))
            {
                previousValue.SchedulingInformationSet.Remove(this);
            }
    
            if (TimeoutAction != null)
            {
                if (!TimeoutAction.SchedulingInformationSet.Contains(this))
                {
                    TimeoutAction.SchedulingInformationSet.Add(this);
                }
                if (TimeoutActionID != TimeoutAction.TimeoutActionID)
                {
                    TimeoutActionID = TimeoutAction.TimeoutActionID;
                }
            }
        }
    
        private void FixupCustomScheduleSpecifiers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomScheduleSpecifier item in e.NewItems)
                {
                    item.SchedulingInformation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomScheduleSpecifier item in e.OldItems)
                {
                    if (ReferenceEquals(item.SchedulingInformation, this))
                    {
                        item.SchedulingInformation = null;
                    }
                }
            }
        }
    
        private void FixupDayofMonthSpecifiers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DayofMonthSpecifier item in e.NewItems)
                {
                    item.SchedulingInformation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DayofMonthSpecifier item in e.OldItems)
                {
                    if (ReferenceEquals(item.SchedulingInformation, this))
                    {
                        item.SchedulingInformation = null;
                    }
                }
            }
        }
    
        private void FixupDayOfYearSpecifiers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DayOfYearSpecifier item in e.NewItems)
                {
                    item.SchedulingInformation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DayOfYearSpecifier item in e.OldItems)
                {
                    if (ReferenceEquals(item.SchedulingInformation, this))
                    {
                        item.SchedulingInformation = null;
                    }
                }
            }
        }
    
        private void FixupMonthlyRelativeSpecifiers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MonthlyRelativeSpecifier item in e.NewItems)
                {
                    item.SchedulingInformation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MonthlyRelativeSpecifier item in e.OldItems)
                {
                    if (ReferenceEquals(item.SchedulingInformation, this))
                    {
                        item.SchedulingInformation = null;
                    }
                }
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    item.SchedulingInformation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (ReferenceEquals(item.SchedulingInformation, this))
                    {
                        item.SchedulingInformation = null;
                    }
                }
            }
        }

        #endregion
    }
}
