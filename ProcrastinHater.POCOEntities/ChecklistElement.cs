//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ProcrastinHater.POCOEntities
{
    public abstract partial class ChecklistElement
    {
        #region Primitive Properties
    
        public virtual int ItemID
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ParentGroupID
        {
            get { return _parentGroupID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentGroupID != value)
                    {
                        if (ParentGroup != null && ParentGroup.ItemID != value)
                        {
                            ParentGroup = null;
                        }
                        _parentGroupID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _parentGroupID;
    
        public virtual string FontName
        {
            get;
            set;
        }
    
        public virtual double FontSize
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> ResolveTime
        {
            get;
            set;
        }
    
        public virtual string FontColor
        {
            get { return _fontColor; }
            set { _fontColor = value; }
        }
        private string _fontColor = "#FF000000";
    
        public virtual string BackgroundColor
        {
            get { return _backgroundColor; }
            set { _backgroundColor = value; }
        }
        private string _backgroundColor = "#FFFFFFFF";

        #endregion
        #region Navigation Properties
    
        public virtual Group ParentGroup
        {
            get { return _parentGroup; }
            set
            {
                if (!ReferenceEquals(_parentGroup, value))
                {
                    var previousValue = _parentGroup;
                    _parentGroup = value;
                    FixupParentGroup(previousValue);
                }
            }
        }
        private Group _parentGroup;
    
        public virtual PositionInformation PositionInformation
        {
            get { return _positionInformation; }
            set
            {
                if (!ReferenceEquals(_positionInformation, value))
                {
                    var previousValue = _positionInformation;
                    _positionInformation = value;
                    FixupPositionInformation(previousValue);
                }
            }
        }
        private PositionInformation _positionInformation;
    
        public virtual ICollection<PositionInformation> PositionsNextItemsSet
        {
            get
            {
                if (_positionsNextItemsSet == null)
                {
                    var newCollection = new FixupCollection<PositionInformation>();
                    newCollection.CollectionChanged += FixupPositionsNextItemsSet;
                    _positionsNextItemsSet = newCollection;
                }
                return _positionsNextItemsSet;
            }
            set
            {
                if (!ReferenceEquals(_positionsNextItemsSet, value))
                {
                    var previousValue = _positionsNextItemsSet as FixupCollection<PositionInformation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPositionsNextItemsSet;
                    }
                    _positionsNextItemsSet = value;
                    var newValue = value as FixupCollection<PositionInformation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPositionsNextItemsSet;
                    }
                }
            }
        }
        private ICollection<PositionInformation> _positionsNextItemsSet;
    
        public virtual ICollection<PositionInformation> PositionsPreviousItemsSet
        {
            get
            {
                if (_positionsPreviousItemsSet == null)
                {
                    var newCollection = new FixupCollection<PositionInformation>();
                    newCollection.CollectionChanged += FixupPositionsPreviousItemsSet;
                    _positionsPreviousItemsSet = newCollection;
                }
                return _positionsPreviousItemsSet;
            }
            set
            {
                if (!ReferenceEquals(_positionsPreviousItemsSet, value))
                {
                    var previousValue = _positionsPreviousItemsSet as FixupCollection<PositionInformation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPositionsPreviousItemsSet;
                    }
                    _positionsPreviousItemsSet = value;
                    var newValue = value as FixupCollection<PositionInformation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPositionsPreviousItemsSet;
                    }
                }
            }
        }
        private ICollection<PositionInformation> _positionsPreviousItemsSet;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupParentGroup(Group previousValue)
        {
            if (previousValue != null && previousValue.ChecklistElements.Contains(this))
            {
                previousValue.ChecklistElements.Remove(this);
            }
    
            if (ParentGroup != null)
            {
                if (!ParentGroup.ChecklistElements.Contains(this))
                {
                    ParentGroup.ChecklistElements.Add(this);
                }
                if (ParentGroupID != ParentGroup.ItemID)
                {
                    ParentGroupID = ParentGroup.ItemID;
                }
            }
            else if (!_settingFK)
            {
                ParentGroupID = null;
            }
        }
    
        private void FixupPositionInformation(PositionInformation previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.ChecklistElement, this))
            {
                previousValue.ChecklistElement = null;
            }
    
            if (PositionInformation != null)
            {
                PositionInformation.ChecklistElement = this;
            }
        }
    
        private void FixupPositionsNextItemsSet(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PositionInformation item in e.NewItems)
                {
                    item.NextItem = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PositionInformation item in e.OldItems)
                {
                    if (ReferenceEquals(item.NextItem, this))
                    {
                        item.NextItem = null;
                    }
                }
            }
        }
    
        private void FixupPositionsPreviousItemsSet(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PositionInformation item in e.NewItems)
                {
                    item.PreviousItem = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PositionInformation item in e.OldItems)
                {
                    if (ReferenceEquals(item.PreviousItem, this))
                    {
                        item.PreviousItem = null;
                    }
                }
            }
        }

        #endregion
    }
}
